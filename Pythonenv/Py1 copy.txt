from flask import Flask, request, jsonify
import cv2
import face_recognition
import numpy as np
import glob
import requests
from io import BytesIO

app = Flask(__name__)

@app.route('/compare', methods=['POST'])
def compare_faces():
    # Get the image URL from the request
    data = request.json
    if 'url' not in data:
        return jsonify({'error': 'No URL provided'}), 400

    url = data['url']
    folder_dir = "images"

    # Download the image from the URL
    response = requests.get(url)
    image_bytes = BytesIO(response.content)
    image1 = np.array(bytearray(image_bytes.read()), dtype=np.uint8)
    image1 = cv2.imdecode(image1, cv2.IMREAD_COLOR)
    rgbimage1 = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)
    img_encoding1 = face_recognition.face_encodings(rgbimage1)

    if not img_encoding1:
        return jsonify({'error': 'No face found in the URL image'}), 400

    img_encoding1 = img_encoding1[0]
    similar_images = []

    for image_path in glob.iglob(f'{folder_dir}/*'):
        if image_path.endswith((".png", ".jpg", ".jpeg")):
            image2 = cv2.imread(image_path)
            rgbimage2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
            img_encoding2 = face_recognition.face_encodings(rgbimage2)

            if img_encoding2:
                img_encoding2 = img_encoding2[0]

                # Compare face encodings and calculate the similarity score
                similarity_score = face_recognition.face_distance([img_encoding1], img_encoding2)[0]

                # Check if the similarity score is less than or equal to 0.65
                if similarity_score <= 0.65:
                    similar_images.append({'image': image_path, 'similarity_score': similarity_score})
            else:
                continue

    return jsonify({'similar_images': similar_images})

if __name__ == '__main__':
    app.run(debug=True)
