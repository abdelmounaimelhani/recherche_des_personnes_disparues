import cv2
import face_recognition
import numpy as np
import glob
import requests
from io import BytesIO

folder_dir = "images"

# Télécharger l'image à partir de l'URL
url = "https://b.fssta.com/uploads/application/soccer/headshots/711.vresize.350.350.medium.70.png"
response = requests.get(url)
image_bytes = BytesIO(response.content)
image1 = np.array(bytearray(image_bytes.read()), dtype=np.uint8)
image1 = cv2.imdecode(image1, cv2.IMREAD_COLOR)
rgbimage1 = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)
img_encoding1 = face_recognition.face_encodings(rgbimage1)[0]

similar_images = []

for image_path in glob.iglob(f'{folder_dir}/*'):
    if (image_path.endswith(".png") or image_path.endswith(".jpg") or image_path.endswith(".jpeg")):
        image2 = cv2.imread(image_path)
        rgbimage2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
        img_encoding2 = face_recognition.face_encodings(rgbimage2)[0]

        # Compare face encodings and calculate the similarity score
        similarity_score = face_recognition.face_distance([img_encoding1], img_encoding2)[0]

        # Check if the similarity score is less than or equal to 0.3 (30% similarity)
        if similarity_score <= 0.65:
            similar_images.append(image_path)
            print(f"Similarity Score: {similarity_score}, Image: {image_path}")
        else:
            print("hhhhhhhhhhhhh")
    else:
        print('ffffffffff')

print("Similar Images:")
for image_path in similar_images:
    print(image_path)